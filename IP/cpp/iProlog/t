
Object Engine::exportTerm(cell x) {

    if (x == cell::tag(cell::BAD,0))
	return Object();

    x = deref(x);
    int t = cell::tagOf(x);
    int w = cell::detag(x);

    Object res;
    switch (t) {
        case cell::C_: res = getSym(w);     break;
        case cell::N_: res = Integer(w);            break;
        case cell::V_: res = cstr("V") + w;         break;
            /*case U_:*/ 

        case cell::R_: {
                    cell a = cell_at(w);
                    if (!cell::isArgOffset(a)) {
                        throw logic_error(cstr("*** should be A, found=") + showCell(a));
                    }
                    int n = cell::detag(a);
                    vector<Object> args;
                    int k = w + 1;
                    for (int i = 0; i < n; i++) {
                        int j = k + i;
                        cell c = cell_at(j);
                        Object o = exportTerm(c);
                        args.push_back(o);
                    }
                    res = args;
                }
                break;
        default:
                    throw logic_error(cstr("*BAD TERM*") + showCell(x));
    }
    return res;
}

