operator new (Inty vec alloc) in matching_clauses
intersect_0p IntSet::get
Hash equal_to
unify CellStack::pop
new_Spine alloc call op new & Inty alloc vec
getIndexables
-- fixed: popSpine calling ~Spine?!?!?!

verification:

try 16-bit cell ints
review idea of relative addressing
look at raw hashmap implementation
look at how to put spines on heap
figure out CellList threading
figure out where to stack unify_list
make unification not use C++ stack???
   goal is at most two stacks, growing from
   a base heap forward, and from the end
   of available space backward
external compiled form -- just symtab & "bytecode"


Roadmap to iProlog with 4K of RAM, 32K of flash

Goal: "Soft-realtime Natural Language Logic Programming on a Picosatellite"

Get relative addressing working
   - besides speedup, may make binary code more compressible
   - LZ4 (about 2x) approaches RAM memcpy speed

Put dload et al. in separate C++ class or prog.h/cpp
   - don't need its buffers
   - download ASCII opcodes to MSP/CC430

Try to make unfold & unify[_args] "stackless"
   - stacks that could b threaded into heap:
	- C++ code stack
	- ustack
	- spine stack
	- CellList

Dispense with indexing, at least at first
   - implement as callbacks, for full orthogonality?
   - custom indexer?
   - how to "heapify" it?

Binary output from compiler
   - endianess perhaps indicated in a header
   - LZ4 compression

Find out whether CC430 can write to its own flash
   - if so, and the address space issue issue can be solved
     look at how initial logic-programming code can be put in flash
     to free up RAM -- which means a split heap, a little hairy

"Garbage collect" initialization code for logic programs?
   - need some control flow analysis to be sure of
     what to dump and how soon to dump it

Try compression
   - probably need new "opcode" to trigger inflate
   - larger (32K) code space enables dictionary compression
   - but split of flash/RAM adddress space a problem

Optimize "deterministic" clauses
   - maybe extend to threaded code?

------------------------------------------------------------

cell2index does a getRef -- maybe bad news for the idea
of relative addressing in heap cells
	  
pp.11-12 of paper:

"For each argument position in the head of a clause (up to a maximum
that can be specified by the programmer) ..."

     MAXIND

"...it associates to each indexable element (symbol, number or arity)...

     C,N,A

"...the set of clauses where the indexable element occurs in that argument
position."

     cell sub-type: indexable_elt?

"For deep indexing, the argument position can be generalized to be the
integer sequence defining the path leading to the indexable element in
a compound term."

     hence "leader"? (Or does he even do this?)
	not clear how the integer sequence would be derived

"The clauses having variables in an indexed argument position are also
collected in a separate set for each argument position."

     vmaps - maps var pos in clause head to ...?

"Sets of clause numbers associated to each (tagged) indexable element are
supported by an IntMap implemented as a fast int-to-int hash table (using
linear probing)."

     clause_no type?
     indexable_elt -> {clause_no*}
     clause_no -> indexable_elt?
     indexable_elt -> clause_no?

"An IntMap is associated to each indexable element by a HashMap."

     This is where Integer comes in. But what is it an integer of?

"The HashMaps are placed into an array indexed by the argument position
to which they apply."

   vector<IMap> imaps

"When looking for the clauses matching an element of the list of goals
to solve, for an indexing element x occurring in position i, we fetch
the set C[x,i] of clauses associated to it."

   Presumably including the functor ("predicate name") of the clause...
   See below.

"If V[i] denotes the set of clauses having variables in position i,
then any of them can also unify with our goal element."

"Thus we would need to compute the union of the sets C[x,i] and V[i] for
each position i,..."

    Why?

"...and then intersect them to obtain the set of matching
clauses. We will not actually compute the unions, however. Instead,...

"...for each element of the set of clauses corresponding to the
“predicate name” (position 0), we retain only those which are either
in C[x,i] or in V[i] for each i > 0."

   the ms/vms in index()?
   why i > 0? Because of functor of head?

"We do the same for each element for the set V[0] of clauses having
variables in predicate positions (if any)."

   "predicate positions" meaning in the predicate name position?

"Finally we sort the resulting set of clause numbers and hand it over
to the main Prolog engine for unification and possible unfolding in case
of success."

   Is the sort order an optimization?
